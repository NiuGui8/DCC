/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class MeasureData implements org.apache.thrift.TBase<MeasureData, MeasureData._Fields>, java.io.Serializable, Cloneable, Comparable<MeasureData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeasureData");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPTIONALS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionals", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField WAVEFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("waveforms", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeasureDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeasureDataTupleSchemeFactory();

  public long time; // required
  public double result; // required
  public MeasureMode mode; // required
  public MeasureType type; // required
  public java.lang.String target; // required
  public java.util.List<MeasureItem> optionals; // required
  public java.util.List<MeasureWaveform> waveforms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    RESULT((short)2, "result"),
    MODE((short)3, "mode"),
    TYPE((short)4, "type"),
    TARGET((short)5, "target"),
    OPTIONALS((short)6, "optionals"),
    WAVEFORMS((short)7, "waveforms");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // RESULT
          return RESULT;
        case 3: // MODE
          return MODE;
        case 4: // TYPE
          return TYPE;
        case 5: // TARGET
          return TARGET;
        case 6: // OPTIONALS
          return OPTIONALS;
        case 7: // WAVEFORMS
          return WAVEFORMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __RESULT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "MeasureMode")));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "MeasureType")));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONALS, new org.apache.thrift.meta_data.FieldMetaData("optionals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MeasureItem"))));
    tmpMap.put(_Fields.WAVEFORMS, new org.apache.thrift.meta_data.FieldMetaData("waveforms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MeasureWaveform"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeasureData.class, metaDataMap);
  }

  public MeasureData() {
  }

  public MeasureData(
    long time,
    double result,
    MeasureMode mode,
    MeasureType type,
    java.lang.String target,
    java.util.List<MeasureItem> optionals,
    java.util.List<MeasureWaveform> waveforms)
  {
    this();
    this.time = time;
    setTimeIsSet(true);
    this.result = result;
    setResultIsSet(true);
    this.mode = mode;
    this.type = type;
    this.target = target;
    this.optionals = optionals;
    this.waveforms = waveforms;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeasureData(MeasureData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time = other.time;
    this.result = other.result;
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTarget()) {
      this.target = other.target;
    }
    if (other.isSetOptionals()) {
      java.util.List<MeasureItem> __this__optionals = new java.util.ArrayList<MeasureItem>(other.optionals.size());
      for (MeasureItem other_element : other.optionals) {
        __this__optionals.add(other_element);
      }
      this.optionals = __this__optionals;
    }
    if (other.isSetWaveforms()) {
      java.util.List<MeasureWaveform> __this__waveforms = new java.util.ArrayList<MeasureWaveform>(other.waveforms.size());
      for (MeasureWaveform other_element : other.waveforms) {
        __this__waveforms.add(other_element);
      }
      this.waveforms = __this__waveforms;
    }
  }

  public MeasureData deepCopy() {
    return new MeasureData(this);
  }

  @Override
  public void clear() {
    setTimeIsSet(false);
    this.time = 0;
    setResultIsSet(false);
    this.result = 0.0;
    this.mode = null;
    this.type = null;
    this.target = null;
    this.optionals = null;
    this.waveforms = null;
  }

  public long getTime() {
    return this.time;
  }

  public MeasureData setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public double getResult() {
    return this.result;
  }

  public MeasureData setResult(double result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public MeasureMode getMode() {
    return this.mode;
  }

  public MeasureData setMode(MeasureMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public MeasureType getType() {
    return this.type;
  }

  public MeasureData setType(MeasureType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getTarget() {
    return this.target;
  }

  public MeasureData setTarget(java.lang.String target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public int getOptionalsSize() {
    return (this.optionals == null) ? 0 : this.optionals.size();
  }

  public java.util.Iterator<MeasureItem> getOptionalsIterator() {
    return (this.optionals == null) ? null : this.optionals.iterator();
  }

  public void addToOptionals(MeasureItem elem) {
    if (this.optionals == null) {
      this.optionals = new java.util.ArrayList<MeasureItem>();
    }
    this.optionals.add(elem);
  }

  public java.util.List<MeasureItem> getOptionals() {
    return this.optionals;
  }

  public MeasureData setOptionals(java.util.List<MeasureItem> optionals) {
    this.optionals = optionals;
    return this;
  }

  public void unsetOptionals() {
    this.optionals = null;
  }

  /** Returns true if field optionals is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionals() {
    return this.optionals != null;
  }

  public void setOptionalsIsSet(boolean value) {
    if (!value) {
      this.optionals = null;
    }
  }

  public int getWaveformsSize() {
    return (this.waveforms == null) ? 0 : this.waveforms.size();
  }

  public java.util.Iterator<MeasureWaveform> getWaveformsIterator() {
    return (this.waveforms == null) ? null : this.waveforms.iterator();
  }

  public void addToWaveforms(MeasureWaveform elem) {
    if (this.waveforms == null) {
      this.waveforms = new java.util.ArrayList<MeasureWaveform>();
    }
    this.waveforms.add(elem);
  }

  public java.util.List<MeasureWaveform> getWaveforms() {
    return this.waveforms;
  }

  public MeasureData setWaveforms(java.util.List<MeasureWaveform> waveforms) {
    this.waveforms = waveforms;
    return this;
  }

  public void unsetWaveforms() {
    this.waveforms = null;
  }

  /** Returns true if field waveforms is set (has been assigned a value) and false otherwise */
  public boolean isSetWaveforms() {
    return this.waveforms != null;
  }

  public void setWaveformsIsSet(boolean value) {
    if (!value) {
      this.waveforms = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.Long)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((java.lang.Double)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((MeasureMode)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MeasureType)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((java.lang.String)value);
      }
      break;

    case OPTIONALS:
      if (value == null) {
        unsetOptionals();
      } else {
        setOptionals((java.util.List<MeasureItem>)value);
      }
      break;

    case WAVEFORMS:
      if (value == null) {
        unsetWaveforms();
      } else {
        setWaveforms((java.util.List<MeasureWaveform>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case RESULT:
      return getResult();

    case MODE:
      return getMode();

    case TYPE:
      return getType();

    case TARGET:
      return getTarget();

    case OPTIONALS:
      return getOptionals();

    case WAVEFORMS:
      return getWaveforms();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case RESULT:
      return isSetResult();
    case MODE:
      return isSetMode();
    case TYPE:
      return isSetType();
    case TARGET:
      return isSetTarget();
    case OPTIONALS:
      return isSetOptionals();
    case WAVEFORMS:
      return isSetWaveforms();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MeasureData)
      return this.equals((MeasureData)that);
    return false;
  }

  public boolean equals(MeasureData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_optionals = true && this.isSetOptionals();
    boolean that_present_optionals = true && that.isSetOptionals();
    if (this_present_optionals || that_present_optionals) {
      if (!(this_present_optionals && that_present_optionals))
        return false;
      if (!this.optionals.equals(that.optionals))
        return false;
    }

    boolean this_present_waveforms = true && this.isSetWaveforms();
    boolean that_present_waveforms = true && that.isSetWaveforms();
    if (this_present_waveforms || that_present_waveforms) {
      if (!(this_present_waveforms && that_present_waveforms))
        return false;
      if (!this.waveforms.equals(that.waveforms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(result);

    hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
    if (isSetMode())
      hashCode = hashCode * 8191 + mode.getValue();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + target.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionals()) ? 131071 : 524287);
    if (isSetOptionals())
      hashCode = hashCode * 8191 + optionals.hashCode();

    hashCode = hashCode * 8191 + ((isSetWaveforms()) ? 131071 : 524287);
    if (isSetWaveforms())
      hashCode = hashCode * 8191 + waveforms.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MeasureData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptionals()).compareTo(other.isSetOptionals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionals, other.optionals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWaveforms()).compareTo(other.isSetWaveforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaveforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveforms, other.waveforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeasureData(");
    boolean first = true;

    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionals:");
    if (this.optionals == null) {
      sb.append("null");
    } else {
      sb.append(this.optionals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waveforms:");
    if (this.waveforms == null) {
      sb.append("null");
    } else {
      sb.append(this.waveforms);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeasureDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeasureDataStandardScheme getScheme() {
      return new MeasureDataStandardScheme();
    }
  }

  private static class MeasureDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeasureData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeasureData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.result = iprot.readDouble();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = com.szlabsun.wqimc.api.manager.MeasureMode.findByValue(iprot.readI32());
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.szlabsun.wqimc.api.manager.MeasureType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.target = iprot.readString();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPTIONALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.optionals = new java.util.ArrayList<MeasureItem>(_list16.size);
                MeasureItem _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new MeasureItem();
                  _elem17.read(iprot);
                  struct.optionals.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setOptionalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WAVEFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.waveforms = new java.util.ArrayList<MeasureWaveform>(_list19.size);
                MeasureWaveform _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new MeasureWaveform();
                  _elem20.read(iprot);
                  struct.waveforms.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setWaveformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeasureData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeDouble(struct.result);
      oprot.writeFieldEnd();
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeString(struct.target);
        oprot.writeFieldEnd();
      }
      if (struct.optionals != null) {
        oprot.writeFieldBegin(OPTIONALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.optionals.size()));
          for (MeasureItem _iter22 : struct.optionals)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.waveforms != null) {
        oprot.writeFieldBegin(WAVEFORMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.waveforms.size()));
          for (MeasureWaveform _iter23 : struct.waveforms)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeasureDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeasureDataTupleScheme getScheme() {
      return new MeasureDataTupleScheme();
    }
  }

  private static class MeasureDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeasureData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeasureData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetResult()) {
        optionals.set(1);
      }
      if (struct.isSetMode()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetTarget()) {
        optionals.set(4);
      }
      if (struct.isSetOptionals()) {
        optionals.set(5);
      }
      if (struct.isSetWaveforms()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetResult()) {
        oprot.writeDouble(struct.result);
      }
      if (struct.isSetMode()) {
        oprot.writeI32(struct.mode.getValue());
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTarget()) {
        oprot.writeString(struct.target);
      }
      if (struct.isSetOptionals()) {
        {
          oprot.writeI32(struct.optionals.size());
          for (MeasureItem _iter24 : struct.optionals)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetWaveforms()) {
        {
          oprot.writeI32(struct.waveforms.size());
          for (MeasureWaveform _iter25 : struct.waveforms)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeasureData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result = iprot.readDouble();
        struct.setResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mode = com.szlabsun.wqimc.api.manager.MeasureMode.findByValue(iprot.readI32());
        struct.setModeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = com.szlabsun.wqimc.api.manager.MeasureType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.target = iprot.readString();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.optionals = new java.util.ArrayList<MeasureItem>(_list26.size);
          MeasureItem _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new MeasureItem();
            _elem27.read(iprot);
            struct.optionals.add(_elem27);
          }
        }
        struct.setOptionalsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.waveforms = new java.util.ArrayList<MeasureWaveform>(_list29.size);
          MeasureWaveform _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new MeasureWaveform();
            _elem30.read(iprot);
            struct.waveforms.add(_elem30);
          }
        }
        struct.setWaveformsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

