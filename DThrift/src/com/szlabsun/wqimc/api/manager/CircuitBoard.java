/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class CircuitBoard implements org.apache.thrift.TBase<CircuitBoard, CircuitBoard._Fields>, java.io.Serializable, Cloneable, Comparable<CircuitBoard> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CircuitBoard");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturer", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MANUF_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("manufDate", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField SOFTWARE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("softwareVersion", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HARDWARE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hardwareVersion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField KERNEL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("kernelVersion", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_SYSTEM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSystemVersion", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CircuitBoardStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CircuitBoardTupleSchemeFactory();

  public java.lang.String name; // required
  public java.lang.String type; // required
  public java.lang.String model; // required
  public java.lang.String sn; // required
  public java.lang.String manufacturer; // required
  public short manufDate; // required
  public java.lang.String softwareVersion; // required
  public java.lang.String hardwareVersion; // required
  public java.lang.String kernelVersion; // required
  public java.lang.String fileSystemVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    MODEL((short)3, "model"),
    SN((short)4, "sn"),
    MANUFACTURER((short)5, "manufacturer"),
    MANUF_DATE((short)6, "manufDate"),
    SOFTWARE_VERSION((short)7, "softwareVersion"),
    HARDWARE_VERSION((short)8, "hardwareVersion"),
    KERNEL_VERSION((short)9, "kernelVersion"),
    FILE_SYSTEM_VERSION((short)10, "fileSystemVersion");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // MODEL
          return MODEL;
        case 4: // SN
          return SN;
        case 5: // MANUFACTURER
          return MANUFACTURER;
        case 6: // MANUF_DATE
          return MANUF_DATE;
        case 7: // SOFTWARE_VERSION
          return SOFTWARE_VERSION;
        case 8: // HARDWARE_VERSION
          return HARDWARE_VERSION;
        case 9: // KERNEL_VERSION
          return KERNEL_VERSION;
        case 10: // FILE_SYSTEM_VERSION
          return FILE_SYSTEM_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MANUFDATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANUFACTURER, new org.apache.thrift.meta_data.FieldMetaData("manufacturer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANUF_DATE, new org.apache.thrift.meta_data.FieldMetaData("manufDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SOFTWARE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("softwareVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HARDWARE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hardwareVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KERNEL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("kernelVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SYSTEM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fileSystemVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CircuitBoard.class, metaDataMap);
  }

  public CircuitBoard() {
  }

  public CircuitBoard(
    java.lang.String name,
    java.lang.String type,
    java.lang.String model,
    java.lang.String sn,
    java.lang.String manufacturer,
    short manufDate,
    java.lang.String softwareVersion,
    java.lang.String hardwareVersion,
    java.lang.String kernelVersion,
    java.lang.String fileSystemVersion)
  {
    this();
    this.name = name;
    this.type = type;
    this.model = model;
    this.sn = sn;
    this.manufacturer = manufacturer;
    this.manufDate = manufDate;
    setManufDateIsSet(true);
    this.softwareVersion = softwareVersion;
    this.hardwareVersion = hardwareVersion;
    this.kernelVersion = kernelVersion;
    this.fileSystemVersion = fileSystemVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CircuitBoard(CircuitBoard other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    if (other.isSetManufacturer()) {
      this.manufacturer = other.manufacturer;
    }
    this.manufDate = other.manufDate;
    if (other.isSetSoftwareVersion()) {
      this.softwareVersion = other.softwareVersion;
    }
    if (other.isSetHardwareVersion()) {
      this.hardwareVersion = other.hardwareVersion;
    }
    if (other.isSetKernelVersion()) {
      this.kernelVersion = other.kernelVersion;
    }
    if (other.isSetFileSystemVersion()) {
      this.fileSystemVersion = other.fileSystemVersion;
    }
  }

  public CircuitBoard deepCopy() {
    return new CircuitBoard(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.type = null;
    this.model = null;
    this.sn = null;
    this.manufacturer = null;
    setManufDateIsSet(false);
    this.manufDate = 0;
    this.softwareVersion = null;
    this.hardwareVersion = null;
    this.kernelVersion = null;
    this.fileSystemVersion = null;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public CircuitBoard setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getType() {
    return this.type;
  }

  public CircuitBoard setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getModel() {
    return this.model;
  }

  public CircuitBoard setModel(java.lang.String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public java.lang.String getSn() {
    return this.sn;
  }

  public CircuitBoard setSn(java.lang.String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  public java.lang.String getManufacturer() {
    return this.manufacturer;
  }

  public CircuitBoard setManufacturer(java.lang.String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  public void unsetManufacturer() {
    this.manufacturer = null;
  }

  /** Returns true if field manufacturer is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturer() {
    return this.manufacturer != null;
  }

  public void setManufacturerIsSet(boolean value) {
    if (!value) {
      this.manufacturer = null;
    }
  }

  public short getManufDate() {
    return this.manufDate;
  }

  public CircuitBoard setManufDate(short manufDate) {
    this.manufDate = manufDate;
    setManufDateIsSet(true);
    return this;
  }

  public void unsetManufDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MANUFDATE_ISSET_ID);
  }

  /** Returns true if field manufDate is set (has been assigned a value) and false otherwise */
  public boolean isSetManufDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MANUFDATE_ISSET_ID);
  }

  public void setManufDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MANUFDATE_ISSET_ID, value);
  }

  public java.lang.String getSoftwareVersion() {
    return this.softwareVersion;
  }

  public CircuitBoard setSoftwareVersion(java.lang.String softwareVersion) {
    this.softwareVersion = softwareVersion;
    return this;
  }

  public void unsetSoftwareVersion() {
    this.softwareVersion = null;
  }

  /** Returns true if field softwareVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetSoftwareVersion() {
    return this.softwareVersion != null;
  }

  public void setSoftwareVersionIsSet(boolean value) {
    if (!value) {
      this.softwareVersion = null;
    }
  }

  public java.lang.String getHardwareVersion() {
    return this.hardwareVersion;
  }

  public CircuitBoard setHardwareVersion(java.lang.String hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
    return this;
  }

  public void unsetHardwareVersion() {
    this.hardwareVersion = null;
  }

  /** Returns true if field hardwareVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHardwareVersion() {
    return this.hardwareVersion != null;
  }

  public void setHardwareVersionIsSet(boolean value) {
    if (!value) {
      this.hardwareVersion = null;
    }
  }

  public java.lang.String getKernelVersion() {
    return this.kernelVersion;
  }

  public CircuitBoard setKernelVersion(java.lang.String kernelVersion) {
    this.kernelVersion = kernelVersion;
    return this;
  }

  public void unsetKernelVersion() {
    this.kernelVersion = null;
  }

  /** Returns true if field kernelVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetKernelVersion() {
    return this.kernelVersion != null;
  }

  public void setKernelVersionIsSet(boolean value) {
    if (!value) {
      this.kernelVersion = null;
    }
  }

  public java.lang.String getFileSystemVersion() {
    return this.fileSystemVersion;
  }

  public CircuitBoard setFileSystemVersion(java.lang.String fileSystemVersion) {
    this.fileSystemVersion = fileSystemVersion;
    return this;
  }

  public void unsetFileSystemVersion() {
    this.fileSystemVersion = null;
  }

  /** Returns true if field fileSystemVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSystemVersion() {
    return this.fileSystemVersion != null;
  }

  public void setFileSystemVersionIsSet(boolean value) {
    if (!value) {
      this.fileSystemVersion = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((java.lang.String)value);
      }
      break;

    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((java.lang.String)value);
      }
      break;

    case MANUFACTURER:
      if (value == null) {
        unsetManufacturer();
      } else {
        setManufacturer((java.lang.String)value);
      }
      break;

    case MANUF_DATE:
      if (value == null) {
        unsetManufDate();
      } else {
        setManufDate((java.lang.Short)value);
      }
      break;

    case SOFTWARE_VERSION:
      if (value == null) {
        unsetSoftwareVersion();
      } else {
        setSoftwareVersion((java.lang.String)value);
      }
      break;

    case HARDWARE_VERSION:
      if (value == null) {
        unsetHardwareVersion();
      } else {
        setHardwareVersion((java.lang.String)value);
      }
      break;

    case KERNEL_VERSION:
      if (value == null) {
        unsetKernelVersion();
      } else {
        setKernelVersion((java.lang.String)value);
      }
      break;

    case FILE_SYSTEM_VERSION:
      if (value == null) {
        unsetFileSystemVersion();
      } else {
        setFileSystemVersion((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case MODEL:
      return getModel();

    case SN:
      return getSn();

    case MANUFACTURER:
      return getManufacturer();

    case MANUF_DATE:
      return getManufDate();

    case SOFTWARE_VERSION:
      return getSoftwareVersion();

    case HARDWARE_VERSION:
      return getHardwareVersion();

    case KERNEL_VERSION:
      return getKernelVersion();

    case FILE_SYSTEM_VERSION:
      return getFileSystemVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case MODEL:
      return isSetModel();
    case SN:
      return isSetSn();
    case MANUFACTURER:
      return isSetManufacturer();
    case MANUF_DATE:
      return isSetManufDate();
    case SOFTWARE_VERSION:
      return isSetSoftwareVersion();
    case HARDWARE_VERSION:
      return isSetHardwareVersion();
    case KERNEL_VERSION:
      return isSetKernelVersion();
    case FILE_SYSTEM_VERSION:
      return isSetFileSystemVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CircuitBoard)
      return this.equals((CircuitBoard)that);
    return false;
  }

  public boolean equals(CircuitBoard that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_manufacturer = true && this.isSetManufacturer();
    boolean that_present_manufacturer = true && that.isSetManufacturer();
    if (this_present_manufacturer || that_present_manufacturer) {
      if (!(this_present_manufacturer && that_present_manufacturer))
        return false;
      if (!this.manufacturer.equals(that.manufacturer))
        return false;
    }

    boolean this_present_manufDate = true;
    boolean that_present_manufDate = true;
    if (this_present_manufDate || that_present_manufDate) {
      if (!(this_present_manufDate && that_present_manufDate))
        return false;
      if (this.manufDate != that.manufDate)
        return false;
    }

    boolean this_present_softwareVersion = true && this.isSetSoftwareVersion();
    boolean that_present_softwareVersion = true && that.isSetSoftwareVersion();
    if (this_present_softwareVersion || that_present_softwareVersion) {
      if (!(this_present_softwareVersion && that_present_softwareVersion))
        return false;
      if (!this.softwareVersion.equals(that.softwareVersion))
        return false;
    }

    boolean this_present_hardwareVersion = true && this.isSetHardwareVersion();
    boolean that_present_hardwareVersion = true && that.isSetHardwareVersion();
    if (this_present_hardwareVersion || that_present_hardwareVersion) {
      if (!(this_present_hardwareVersion && that_present_hardwareVersion))
        return false;
      if (!this.hardwareVersion.equals(that.hardwareVersion))
        return false;
    }

    boolean this_present_kernelVersion = true && this.isSetKernelVersion();
    boolean that_present_kernelVersion = true && that.isSetKernelVersion();
    if (this_present_kernelVersion || that_present_kernelVersion) {
      if (!(this_present_kernelVersion && that_present_kernelVersion))
        return false;
      if (!this.kernelVersion.equals(that.kernelVersion))
        return false;
    }

    boolean this_present_fileSystemVersion = true && this.isSetFileSystemVersion();
    boolean that_present_fileSystemVersion = true && that.isSetFileSystemVersion();
    if (this_present_fileSystemVersion || that_present_fileSystemVersion) {
      if (!(this_present_fileSystemVersion && that_present_fileSystemVersion))
        return false;
      if (!this.fileSystemVersion.equals(that.fileSystemVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetModel()) ? 131071 : 524287);
    if (isSetModel())
      hashCode = hashCode * 8191 + model.hashCode();

    hashCode = hashCode * 8191 + ((isSetSn()) ? 131071 : 524287);
    if (isSetSn())
      hashCode = hashCode * 8191 + sn.hashCode();

    hashCode = hashCode * 8191 + ((isSetManufacturer()) ? 131071 : 524287);
    if (isSetManufacturer())
      hashCode = hashCode * 8191 + manufacturer.hashCode();

    hashCode = hashCode * 8191 + manufDate;

    hashCode = hashCode * 8191 + ((isSetSoftwareVersion()) ? 131071 : 524287);
    if (isSetSoftwareVersion())
      hashCode = hashCode * 8191 + softwareVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetHardwareVersion()) ? 131071 : 524287);
    if (isSetHardwareVersion())
      hashCode = hashCode * 8191 + hardwareVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetKernelVersion()) ? 131071 : 524287);
    if (isSetKernelVersion())
      hashCode = hashCode * 8191 + kernelVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileSystemVersion()) ? 131071 : 524287);
    if (isSetFileSystemVersion())
      hashCode = hashCode * 8191 + fileSystemVersion.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CircuitBoard other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManufacturer()).compareTo(other.isSetManufacturer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturer, other.manufacturer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManufDate()).compareTo(other.isSetManufDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufDate, other.manufDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSoftwareVersion()).compareTo(other.isSetSoftwareVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoftwareVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.softwareVersion, other.softwareVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHardwareVersion()).compareTo(other.isSetHardwareVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardwareVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hardwareVersion, other.hardwareVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKernelVersion()).compareTo(other.isSetKernelVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKernelVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kernelVersion, other.kernelVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFileSystemVersion()).compareTo(other.isSetFileSystemVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSystemVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSystemVersion, other.fileSystemVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CircuitBoard(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sn:");
    if (this.sn == null) {
      sb.append("null");
    } else {
      sb.append(this.sn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacturer:");
    if (this.manufacturer == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacturer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufDate:");
    sb.append(this.manufDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("softwareVersion:");
    if (this.softwareVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.softwareVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hardwareVersion:");
    if (this.hardwareVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.hardwareVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kernelVersion:");
    if (this.kernelVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.kernelVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSystemVersion:");
    if (this.fileSystemVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.fileSystemVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CircuitBoardStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CircuitBoardStandardScheme getScheme() {
      return new CircuitBoardStandardScheme();
    }
  }

  private static class CircuitBoardStandardScheme extends org.apache.thrift.scheme.StandardScheme<CircuitBoard> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CircuitBoard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MANUFACTURER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacturer = iprot.readString();
              struct.setManufacturerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MANUF_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.manufDate = iprot.readI16();
              struct.setManufDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SOFTWARE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.softwareVersion = iprot.readString();
              struct.setSoftwareVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HARDWARE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hardwareVersion = iprot.readString();
              struct.setHardwareVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KERNEL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kernelVersion = iprot.readString();
              struct.setKernelVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_SYSTEM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileSystemVersion = iprot.readString();
              struct.setFileSystemVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CircuitBoard struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(struct.model);
        oprot.writeFieldEnd();
      }
      if (struct.sn != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        oprot.writeString(struct.sn);
        oprot.writeFieldEnd();
      }
      if (struct.manufacturer != null) {
        oprot.writeFieldBegin(MANUFACTURER_FIELD_DESC);
        oprot.writeString(struct.manufacturer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MANUF_DATE_FIELD_DESC);
      oprot.writeI16(struct.manufDate);
      oprot.writeFieldEnd();
      if (struct.softwareVersion != null) {
        oprot.writeFieldBegin(SOFTWARE_VERSION_FIELD_DESC);
        oprot.writeString(struct.softwareVersion);
        oprot.writeFieldEnd();
      }
      if (struct.hardwareVersion != null) {
        oprot.writeFieldBegin(HARDWARE_VERSION_FIELD_DESC);
        oprot.writeString(struct.hardwareVersion);
        oprot.writeFieldEnd();
      }
      if (struct.kernelVersion != null) {
        oprot.writeFieldBegin(KERNEL_VERSION_FIELD_DESC);
        oprot.writeString(struct.kernelVersion);
        oprot.writeFieldEnd();
      }
      if (struct.fileSystemVersion != null) {
        oprot.writeFieldBegin(FILE_SYSTEM_VERSION_FIELD_DESC);
        oprot.writeString(struct.fileSystemVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CircuitBoardTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CircuitBoardTupleScheme getScheme() {
      return new CircuitBoardTupleScheme();
    }
  }

  private static class CircuitBoardTupleScheme extends org.apache.thrift.scheme.TupleScheme<CircuitBoard> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CircuitBoard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetModel()) {
        optionals.set(2);
      }
      if (struct.isSetSn()) {
        optionals.set(3);
      }
      if (struct.isSetManufacturer()) {
        optionals.set(4);
      }
      if (struct.isSetManufDate()) {
        optionals.set(5);
      }
      if (struct.isSetSoftwareVersion()) {
        optionals.set(6);
      }
      if (struct.isSetHardwareVersion()) {
        optionals.set(7);
      }
      if (struct.isSetKernelVersion()) {
        optionals.set(8);
      }
      if (struct.isSetFileSystemVersion()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetModel()) {
        oprot.writeString(struct.model);
      }
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetManufacturer()) {
        oprot.writeString(struct.manufacturer);
      }
      if (struct.isSetManufDate()) {
        oprot.writeI16(struct.manufDate);
      }
      if (struct.isSetSoftwareVersion()) {
        oprot.writeString(struct.softwareVersion);
      }
      if (struct.isSetHardwareVersion()) {
        oprot.writeString(struct.hardwareVersion);
      }
      if (struct.isSetKernelVersion()) {
        oprot.writeString(struct.kernelVersion);
      }
      if (struct.isSetFileSystemVersion()) {
        oprot.writeString(struct.fileSystemVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CircuitBoard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.model = iprot.readString();
        struct.setModelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(4)) {
        struct.manufacturer = iprot.readString();
        struct.setManufacturerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.manufDate = iprot.readI16();
        struct.setManufDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.softwareVersion = iprot.readString();
        struct.setSoftwareVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hardwareVersion = iprot.readString();
        struct.setHardwareVersionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.kernelVersion = iprot.readString();
        struct.setKernelVersionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fileSystemVersion = iprot.readString();
        struct.setFileSystemVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

