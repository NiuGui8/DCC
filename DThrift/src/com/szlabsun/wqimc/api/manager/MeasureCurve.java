/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class MeasureCurve implements org.apache.thrift.TBase<MeasureCurve, MeasureCurve._Fields>, java.io.Serializable, Cloneable, Comparable<MeasureCurve> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeasureCurve");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("k", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CURVE_FIELD_DESC = new org.apache.thrift.protocol.TField("curve", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPTIONALS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionals", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField WAVEFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("waveforms", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeasureCurveStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeasureCurveTupleSchemeFactory();

  public long time; // required
  public double k; // required
  public double b; // required
  public java.lang.String curve; // required
  public java.util.List<MeasureItem> optionals; // required
  public java.util.List<MeasureWaveform> waveforms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    K((short)2, "k"),
    B((short)3, "b"),
    CURVE((short)4, "curve"),
    OPTIONALS((short)5, "optionals"),
    WAVEFORMS((short)6, "waveforms");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // K
          return K;
        case 3: // B
          return B;
        case 4: // CURVE
          return CURVE;
        case 5: // OPTIONALS
          return OPTIONALS;
        case 6: // WAVEFORMS
          return WAVEFORMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __K_ISSET_ID = 1;
  private static final int __B_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("k", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURVE, new org.apache.thrift.meta_data.FieldMetaData("curve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONALS, new org.apache.thrift.meta_data.FieldMetaData("optionals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeasureItem.class))));
    tmpMap.put(_Fields.WAVEFORMS, new org.apache.thrift.meta_data.FieldMetaData("waveforms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "MeasureWaveform"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeasureCurve.class, metaDataMap);
  }

  public MeasureCurve() {
  }

  public MeasureCurve(
    long time,
    double k,
    double b,
    java.lang.String curve,
    java.util.List<MeasureItem> optionals,
    java.util.List<MeasureWaveform> waveforms)
  {
    this();
    this.time = time;
    setTimeIsSet(true);
    this.k = k;
    setKIsSet(true);
    this.b = b;
    setBIsSet(true);
    this.curve = curve;
    this.optionals = optionals;
    this.waveforms = waveforms;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeasureCurve(MeasureCurve other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time = other.time;
    this.k = other.k;
    this.b = other.b;
    if (other.isSetCurve()) {
      this.curve = other.curve;
    }
    if (other.isSetOptionals()) {
      java.util.List<MeasureItem> __this__optionals = new java.util.ArrayList<MeasureItem>(other.optionals.size());
      for (MeasureItem other_element : other.optionals) {
        __this__optionals.add(new MeasureItem(other_element));
      }
      this.optionals = __this__optionals;
    }
    if (other.isSetWaveforms()) {
      java.util.List<MeasureWaveform> __this__waveforms = new java.util.ArrayList<MeasureWaveform>(other.waveforms.size());
      for (MeasureWaveform other_element : other.waveforms) {
        __this__waveforms.add(other_element);
      }
      this.waveforms = __this__waveforms;
    }
  }

  public MeasureCurve deepCopy() {
    return new MeasureCurve(this);
  }

  @Override
  public void clear() {
    setTimeIsSet(false);
    this.time = 0;
    setKIsSet(false);
    this.k = 0.0;
    setBIsSet(false);
    this.b = 0.0;
    this.curve = null;
    this.optionals = null;
    this.waveforms = null;
  }

  public long getTime() {
    return this.time;
  }

  public MeasureCurve setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public double getK() {
    return this.k;
  }

  public MeasureCurve setK(double k) {
    this.k = k;
    setKIsSet(true);
    return this;
  }

  public void unsetK() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __K_ISSET_ID);
  }

  /** Returns true if field k is set (has been assigned a value) and false otherwise */
  public boolean isSetK() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __K_ISSET_ID);
  }

  public void setKIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __K_ISSET_ID, value);
  }

  public double getB() {
    return this.b;
  }

  public MeasureCurve setB(double b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public java.lang.String getCurve() {
    return this.curve;
  }

  public MeasureCurve setCurve(java.lang.String curve) {
    this.curve = curve;
    return this;
  }

  public void unsetCurve() {
    this.curve = null;
  }

  /** Returns true if field curve is set (has been assigned a value) and false otherwise */
  public boolean isSetCurve() {
    return this.curve != null;
  }

  public void setCurveIsSet(boolean value) {
    if (!value) {
      this.curve = null;
    }
  }

  public int getOptionalsSize() {
    return (this.optionals == null) ? 0 : this.optionals.size();
  }

  public java.util.Iterator<MeasureItem> getOptionalsIterator() {
    return (this.optionals == null) ? null : this.optionals.iterator();
  }

  public void addToOptionals(MeasureItem elem) {
    if (this.optionals == null) {
      this.optionals = new java.util.ArrayList<MeasureItem>();
    }
    this.optionals.add(elem);
  }

  public java.util.List<MeasureItem> getOptionals() {
    return this.optionals;
  }

  public MeasureCurve setOptionals(java.util.List<MeasureItem> optionals) {
    this.optionals = optionals;
    return this;
  }

  public void unsetOptionals() {
    this.optionals = null;
  }

  /** Returns true if field optionals is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionals() {
    return this.optionals != null;
  }

  public void setOptionalsIsSet(boolean value) {
    if (!value) {
      this.optionals = null;
    }
  }

  public int getWaveformsSize() {
    return (this.waveforms == null) ? 0 : this.waveforms.size();
  }

  public java.util.Iterator<MeasureWaveform> getWaveformsIterator() {
    return (this.waveforms == null) ? null : this.waveforms.iterator();
  }

  public void addToWaveforms(MeasureWaveform elem) {
    if (this.waveforms == null) {
      this.waveforms = new java.util.ArrayList<MeasureWaveform>();
    }
    this.waveforms.add(elem);
  }

  public java.util.List<MeasureWaveform> getWaveforms() {
    return this.waveforms;
  }

  public MeasureCurve setWaveforms(java.util.List<MeasureWaveform> waveforms) {
    this.waveforms = waveforms;
    return this;
  }

  public void unsetWaveforms() {
    this.waveforms = null;
  }

  /** Returns true if field waveforms is set (has been assigned a value) and false otherwise */
  public boolean isSetWaveforms() {
    return this.waveforms != null;
  }

  public void setWaveformsIsSet(boolean value) {
    if (!value) {
      this.waveforms = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.Long)value);
      }
      break;

    case K:
      if (value == null) {
        unsetK();
      } else {
        setK((java.lang.Double)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((java.lang.Double)value);
      }
      break;

    case CURVE:
      if (value == null) {
        unsetCurve();
      } else {
        setCurve((java.lang.String)value);
      }
      break;

    case OPTIONALS:
      if (value == null) {
        unsetOptionals();
      } else {
        setOptionals((java.util.List<MeasureItem>)value);
      }
      break;

    case WAVEFORMS:
      if (value == null) {
        unsetWaveforms();
      } else {
        setWaveforms((java.util.List<MeasureWaveform>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case K:
      return getK();

    case B:
      return getB();

    case CURVE:
      return getCurve();

    case OPTIONALS:
      return getOptionals();

    case WAVEFORMS:
      return getWaveforms();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case K:
      return isSetK();
    case B:
      return isSetB();
    case CURVE:
      return isSetCurve();
    case OPTIONALS:
      return isSetOptionals();
    case WAVEFORMS:
      return isSetWaveforms();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MeasureCurve)
      return this.equals((MeasureCurve)that);
    return false;
  }

  public boolean equals(MeasureCurve that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_k = true;
    boolean that_present_k = true;
    if (this_present_k || that_present_k) {
      if (!(this_present_k && that_present_k))
        return false;
      if (this.k != that.k)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_curve = true && this.isSetCurve();
    boolean that_present_curve = true && that.isSetCurve();
    if (this_present_curve || that_present_curve) {
      if (!(this_present_curve && that_present_curve))
        return false;
      if (!this.curve.equals(that.curve))
        return false;
    }

    boolean this_present_optionals = true && this.isSetOptionals();
    boolean that_present_optionals = true && that.isSetOptionals();
    if (this_present_optionals || that_present_optionals) {
      if (!(this_present_optionals && that_present_optionals))
        return false;
      if (!this.optionals.equals(that.optionals))
        return false;
    }

    boolean this_present_waveforms = true && this.isSetWaveforms();
    boolean that_present_waveforms = true && that.isSetWaveforms();
    if (this_present_waveforms || that_present_waveforms) {
      if (!(this_present_waveforms && that_present_waveforms))
        return false;
      if (!this.waveforms.equals(that.waveforms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(k);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(b);

    hashCode = hashCode * 8191 + ((isSetCurve()) ? 131071 : 524287);
    if (isSetCurve())
      hashCode = hashCode * 8191 + curve.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptionals()) ? 131071 : 524287);
    if (isSetOptionals())
      hashCode = hashCode * 8191 + optionals.hashCode();

    hashCode = hashCode * 8191 + ((isSetWaveforms()) ? 131071 : 524287);
    if (isSetWaveforms())
      hashCode = hashCode * 8191 + waveforms.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MeasureCurve other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetK()).compareTo(other.isSetK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.k, other.k);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurve()).compareTo(other.isSetCurve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curve, other.curve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptionals()).compareTo(other.isSetOptionals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionals, other.optionals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWaveforms()).compareTo(other.isSetWaveforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaveforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveforms, other.waveforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeasureCurve(");
    boolean first = true;

    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("k:");
    sb.append(this.k);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curve:");
    if (this.curve == null) {
      sb.append("null");
    } else {
      sb.append(this.curve);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionals:");
    if (this.optionals == null) {
      sb.append("null");
    } else {
      sb.append(this.optionals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waveforms:");
    if (this.waveforms == null) {
      sb.append("null");
    } else {
      sb.append(this.waveforms);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeasureCurveStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeasureCurveStandardScheme getScheme() {
      return new MeasureCurveStandardScheme();
    }
  }

  private static class MeasureCurveStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeasureCurve> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeasureCurve struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // K
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.k = iprot.readDouble();
              struct.setKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.b = iprot.readDouble();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.curve = iprot.readString();
              struct.setCurveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPTIONALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.optionals = new java.util.ArrayList<MeasureItem>(_list32.size);
                MeasureItem _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new MeasureItem();
                  _elem33.read(iprot);
                  struct.optionals.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setOptionalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WAVEFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.waveforms = new java.util.ArrayList<MeasureWaveform>(_list35.size);
                MeasureWaveform _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new MeasureWaveform();
                  _elem36.read(iprot);
                  struct.waveforms.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setWaveformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeasureCurve struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(K_FIELD_DESC);
      oprot.writeDouble(struct.k);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeDouble(struct.b);
      oprot.writeFieldEnd();
      if (struct.curve != null) {
        oprot.writeFieldBegin(CURVE_FIELD_DESC);
        oprot.writeString(struct.curve);
        oprot.writeFieldEnd();
      }
      if (struct.optionals != null) {
        oprot.writeFieldBegin(OPTIONALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.optionals.size()));
          for (MeasureItem _iter38 : struct.optionals)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.waveforms != null) {
        oprot.writeFieldBegin(WAVEFORMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.waveforms.size()));
          for (MeasureWaveform _iter39 : struct.waveforms)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeasureCurveTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeasureCurveTupleScheme getScheme() {
      return new MeasureCurveTupleScheme();
    }
  }

  private static class MeasureCurveTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeasureCurve> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeasureCurve struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetK()) {
        optionals.set(1);
      }
      if (struct.isSetB()) {
        optionals.set(2);
      }
      if (struct.isSetCurve()) {
        optionals.set(3);
      }
      if (struct.isSetOptionals()) {
        optionals.set(4);
      }
      if (struct.isSetWaveforms()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetK()) {
        oprot.writeDouble(struct.k);
      }
      if (struct.isSetB()) {
        oprot.writeDouble(struct.b);
      }
      if (struct.isSetCurve()) {
        oprot.writeString(struct.curve);
      }
      if (struct.isSetOptionals()) {
        {
          oprot.writeI32(struct.optionals.size());
          for (MeasureItem _iter40 : struct.optionals)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetWaveforms()) {
        {
          oprot.writeI32(struct.waveforms.size());
          for (MeasureWaveform _iter41 : struct.waveforms)
          {
            _iter41.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeasureCurve struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.k = iprot.readDouble();
        struct.setKIsSet(true);
      }
      if (incoming.get(2)) {
        struct.b = iprot.readDouble();
        struct.setBIsSet(true);
      }
      if (incoming.get(3)) {
        struct.curve = iprot.readString();
        struct.setCurveIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.optionals = new java.util.ArrayList<MeasureItem>(_list42.size);
          MeasureItem _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new MeasureItem();
            _elem43.read(iprot);
            struct.optionals.add(_elem43);
          }
        }
        struct.setOptionalsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.waveforms = new java.util.ArrayList<MeasureWaveform>(_list45.size);
          MeasureWaveform _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new MeasureWaveform();
            _elem46.read(iprot);
            struct.waveforms.add(_elem46);
          }
        }
        struct.setWaveformsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

