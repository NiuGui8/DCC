/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class Instrument implements org.apache.thrift.TBase<Instrument, Instrument._Fields>, java.io.Serializable, Cloneable, Comparable<Instrument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Instrument");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturer", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CIRCUIT_BOARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("circuitBoards", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InstrumentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InstrumentTupleSchemeFactory();

  public java.nio.ByteBuffer uuid; // required
  public java.lang.String name; // required
  public java.lang.String type; // required
  public java.lang.String model; // required
  public java.lang.String sn; // required
  public java.lang.String version; // required
  public java.util.List<java.lang.String> targets; // required
  public java.lang.String manufacturer; // required
  public java.util.List<CircuitBoard> circuitBoards; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    NAME((short)2, "name"),
    TYPE((short)3, "type"),
    MODEL((short)4, "model"),
    SN((short)5, "sn"),
    VERSION((short)6, "version"),
    TARGETS((short)7, "targets"),
    MANUFACTURER((short)8, "manufacturer"),
    CIRCUIT_BOARDS((short)9, "circuitBoards");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // MODEL
          return MODEL;
        case 5: // SN
          return SN;
        case 6: // VERSION
          return VERSION;
        case 7: // TARGETS
          return TARGETS;
        case 8: // MANUFACTURER
          return MANUFACTURER;
        case 9: // CIRCUIT_BOARDS
          return CIRCUIT_BOARDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MANUFACTURER, new org.apache.thrift.meta_data.FieldMetaData("manufacturer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CIRCUIT_BOARDS, new org.apache.thrift.meta_data.FieldMetaData("circuitBoards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "CircuitBoard"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Instrument.class, metaDataMap);
  }

  public Instrument() {
  }

  public Instrument(
    java.nio.ByteBuffer uuid,
    java.lang.String name,
    java.lang.String type,
    java.lang.String model,
    java.lang.String sn,
    java.lang.String version,
    java.util.List<java.lang.String> targets,
    java.lang.String manufacturer,
    java.util.List<CircuitBoard> circuitBoards)
  {
    this();
    this.uuid = org.apache.thrift.TBaseHelper.copyBinary(uuid);
    this.name = name;
    this.type = type;
    this.model = model;
    this.sn = sn;
    this.version = version;
    this.targets = targets;
    this.manufacturer = manufacturer;
    this.circuitBoards = circuitBoards;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Instrument(Instrument other) {
    if (other.isSetUuid()) {
      this.uuid = org.apache.thrift.TBaseHelper.copyBinary(other.uuid);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetTargets()) {
      java.util.List<java.lang.String> __this__targets = new java.util.ArrayList<java.lang.String>(other.targets);
      this.targets = __this__targets;
    }
    if (other.isSetManufacturer()) {
      this.manufacturer = other.manufacturer;
    }
    if (other.isSetCircuitBoards()) {
      java.util.List<CircuitBoard> __this__circuitBoards = new java.util.ArrayList<CircuitBoard>(other.circuitBoards.size());
      for (CircuitBoard other_element : other.circuitBoards) {
        __this__circuitBoards.add(other_element);
      }
      this.circuitBoards = __this__circuitBoards;
    }
  }

  public Instrument deepCopy() {
    return new Instrument(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.name = null;
    this.type = null;
    this.model = null;
    this.sn = null;
    this.version = null;
    this.targets = null;
    this.manufacturer = null;
    this.circuitBoards = null;
  }

  public byte[] getUuid() {
    setUuid(org.apache.thrift.TBaseHelper.rightSize(uuid));
    return uuid == null ? null : uuid.array();
  }

  public java.nio.ByteBuffer bufferForUuid() {
    return org.apache.thrift.TBaseHelper.copyBinary(uuid);
  }

  public Instrument setUuid(byte[] uuid) {
    this.uuid = uuid == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(uuid.clone());
    return this;
  }

  public Instrument setUuid(java.nio.ByteBuffer uuid) {
    this.uuid = org.apache.thrift.TBaseHelper.copyBinary(uuid);
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public Instrument setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getType() {
    return this.type;
  }

  public Instrument setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getModel() {
    return this.model;
  }

  public Instrument setModel(java.lang.String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public java.lang.String getSn() {
    return this.sn;
  }

  public Instrument setSn(java.lang.String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  public java.lang.String getVersion() {
    return this.version;
  }

  public Instrument setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getTargetsSize() {
    return (this.targets == null) ? 0 : this.targets.size();
  }

  public java.util.Iterator<java.lang.String> getTargetsIterator() {
    return (this.targets == null) ? null : this.targets.iterator();
  }

  public void addToTargets(java.lang.String elem) {
    if (this.targets == null) {
      this.targets = new java.util.ArrayList<java.lang.String>();
    }
    this.targets.add(elem);
  }

  public java.util.List<java.lang.String> getTargets() {
    return this.targets;
  }

  public Instrument setTargets(java.util.List<java.lang.String> targets) {
    this.targets = targets;
    return this;
  }

  public void unsetTargets() {
    this.targets = null;
  }

  /** Returns true if field targets is set (has been assigned a value) and false otherwise */
  public boolean isSetTargets() {
    return this.targets != null;
  }

  public void setTargetsIsSet(boolean value) {
    if (!value) {
      this.targets = null;
    }
  }

  public java.lang.String getManufacturer() {
    return this.manufacturer;
  }

  public Instrument setManufacturer(java.lang.String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  public void unsetManufacturer() {
    this.manufacturer = null;
  }

  /** Returns true if field manufacturer is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturer() {
    return this.manufacturer != null;
  }

  public void setManufacturerIsSet(boolean value) {
    if (!value) {
      this.manufacturer = null;
    }
  }

  public int getCircuitBoardsSize() {
    return (this.circuitBoards == null) ? 0 : this.circuitBoards.size();
  }

  public java.util.Iterator<CircuitBoard> getCircuitBoardsIterator() {
    return (this.circuitBoards == null) ? null : this.circuitBoards.iterator();
  }

  public void addToCircuitBoards(CircuitBoard elem) {
    if (this.circuitBoards == null) {
      this.circuitBoards = new java.util.ArrayList<CircuitBoard>();
    }
    this.circuitBoards.add(elem);
  }

  public java.util.List<CircuitBoard> getCircuitBoards() {
    return this.circuitBoards;
  }

  public Instrument setCircuitBoards(java.util.List<CircuitBoard> circuitBoards) {
    this.circuitBoards = circuitBoards;
    return this;
  }

  public void unsetCircuitBoards() {
    this.circuitBoards = null;
  }

  /** Returns true if field circuitBoards is set (has been assigned a value) and false otherwise */
  public boolean isSetCircuitBoards() {
    return this.circuitBoards != null;
  }

  public void setCircuitBoardsIsSet(boolean value) {
    if (!value) {
      this.circuitBoards = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        if (value instanceof byte[]) {
          setUuid((byte[])value);
        } else {
          setUuid((java.nio.ByteBuffer)value);
        }
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((java.lang.String)value);
      }
      break;

    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case TARGETS:
      if (value == null) {
        unsetTargets();
      } else {
        setTargets((java.util.List<java.lang.String>)value);
      }
      break;

    case MANUFACTURER:
      if (value == null) {
        unsetManufacturer();
      } else {
        setManufacturer((java.lang.String)value);
      }
      break;

    case CIRCUIT_BOARDS:
      if (value == null) {
        unsetCircuitBoards();
      } else {
        setCircuitBoards((java.util.List<CircuitBoard>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case MODEL:
      return getModel();

    case SN:
      return getSn();

    case VERSION:
      return getVersion();

    case TARGETS:
      return getTargets();

    case MANUFACTURER:
      return getManufacturer();

    case CIRCUIT_BOARDS:
      return getCircuitBoards();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case MODEL:
      return isSetModel();
    case SN:
      return isSetSn();
    case VERSION:
      return isSetVersion();
    case TARGETS:
      return isSetTargets();
    case MANUFACTURER:
      return isSetManufacturer();
    case CIRCUIT_BOARDS:
      return isSetCircuitBoards();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Instrument)
      return this.equals((Instrument)that);
    return false;
  }

  public boolean equals(Instrument that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_targets = true && this.isSetTargets();
    boolean that_present_targets = true && that.isSetTargets();
    if (this_present_targets || that_present_targets) {
      if (!(this_present_targets && that_present_targets))
        return false;
      if (!this.targets.equals(that.targets))
        return false;
    }

    boolean this_present_manufacturer = true && this.isSetManufacturer();
    boolean that_present_manufacturer = true && that.isSetManufacturer();
    if (this_present_manufacturer || that_present_manufacturer) {
      if (!(this_present_manufacturer && that_present_manufacturer))
        return false;
      if (!this.manufacturer.equals(that.manufacturer))
        return false;
    }

    boolean this_present_circuitBoards = true && this.isSetCircuitBoards();
    boolean that_present_circuitBoards = true && that.isSetCircuitBoards();
    if (this_present_circuitBoards || that_present_circuitBoards) {
      if (!(this_present_circuitBoards && that_present_circuitBoards))
        return false;
      if (!this.circuitBoards.equals(that.circuitBoards))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetModel()) ? 131071 : 524287);
    if (isSetModel())
      hashCode = hashCode * 8191 + model.hashCode();

    hashCode = hashCode * 8191 + ((isSetSn()) ? 131071 : 524287);
    if (isSetSn())
      hashCode = hashCode * 8191 + sn.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargets()) ? 131071 : 524287);
    if (isSetTargets())
      hashCode = hashCode * 8191 + targets.hashCode();

    hashCode = hashCode * 8191 + ((isSetManufacturer()) ? 131071 : 524287);
    if (isSetManufacturer())
      hashCode = hashCode * 8191 + manufacturer.hashCode();

    hashCode = hashCode * 8191 + ((isSetCircuitBoards()) ? 131071 : 524287);
    if (isSetCircuitBoards())
      hashCode = hashCode * 8191 + circuitBoards.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Instrument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTargets()).compareTo(other.isSetTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targets, other.targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManufacturer()).compareTo(other.isSetManufacturer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturer, other.manufacturer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCircuitBoards()).compareTo(other.isSetCircuitBoards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCircuitBoards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circuitBoards, other.circuitBoards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Instrument(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.uuid, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sn:");
    if (this.sn == null) {
      sb.append("null");
    } else {
      sb.append(this.sn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targets:");
    if (this.targets == null) {
      sb.append("null");
    } else {
      sb.append(this.targets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacturer:");
    if (this.manufacturer == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacturer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("circuitBoards:");
    if (this.circuitBoards == null) {
      sb.append("null");
    } else {
      sb.append(this.circuitBoards);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstrumentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InstrumentStandardScheme getScheme() {
      return new InstrumentStandardScheme();
    }
  }

  private static class InstrumentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Instrument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Instrument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readBinary();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.targets = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.targets.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MANUFACTURER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacturer = iprot.readString();
              struct.setManufacturerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CIRCUIT_BOARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.circuitBoards = new java.util.ArrayList<CircuitBoard>(_list3.size);
                CircuitBoard _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new CircuitBoard();
                  _elem4.read(iprot);
                  struct.circuitBoards.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCircuitBoardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Instrument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeBinary(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(struct.model);
        oprot.writeFieldEnd();
      }
      if (struct.sn != null) {
        oprot.writeFieldBegin(SN_FIELD_DESC);
        oprot.writeString(struct.sn);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.targets != null) {
        oprot.writeFieldBegin(TARGETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.targets.size()));
          for (java.lang.String _iter6 : struct.targets)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.manufacturer != null) {
        oprot.writeFieldBegin(MANUFACTURER_FIELD_DESC);
        oprot.writeString(struct.manufacturer);
        oprot.writeFieldEnd();
      }
      if (struct.circuitBoards != null) {
        oprot.writeFieldBegin(CIRCUIT_BOARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.circuitBoards.size()));
          for (CircuitBoard _iter7 : struct.circuitBoards)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstrumentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InstrumentTupleScheme getScheme() {
      return new InstrumentTupleScheme();
    }
  }

  private static class InstrumentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Instrument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Instrument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetModel()) {
        optionals.set(3);
      }
      if (struct.isSetSn()) {
        optionals.set(4);
      }
      if (struct.isSetVersion()) {
        optionals.set(5);
      }
      if (struct.isSetTargets()) {
        optionals.set(6);
      }
      if (struct.isSetManufacturer()) {
        optionals.set(7);
      }
      if (struct.isSetCircuitBoards()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUuid()) {
        oprot.writeBinary(struct.uuid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetModel()) {
        oprot.writeString(struct.model);
      }
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetTargets()) {
        {
          oprot.writeI32(struct.targets.size());
          for (java.lang.String _iter8 : struct.targets)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetManufacturer()) {
        oprot.writeString(struct.manufacturer);
      }
      if (struct.isSetCircuitBoards()) {
        {
          oprot.writeI32(struct.circuitBoards.size());
          for (CircuitBoard _iter9 : struct.circuitBoards)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Instrument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.uuid = iprot.readBinary();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.model = iprot.readString();
        struct.setModelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(5)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.targets = new java.util.ArrayList<java.lang.String>(_list10.size);
          java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.targets.add(_elem11);
          }
        }
        struct.setTargetsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.manufacturer = iprot.readString();
        struct.setManufacturerIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.circuitBoards = new java.util.ArrayList<CircuitBoard>(_list13.size);
          CircuitBoard _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new CircuitBoard();
            _elem14.read(iprot);
            struct.circuitBoards.add(_elem14);
          }
        }
        struct.setCircuitBoardsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

