/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class ReagentConfigItem implements org.apache.thrift.TBase<ReagentConfigItem, ReagentConfigItem._Fields>, java.io.Serializable, Cloneable, Comparable<ReagentConfigItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReagentConfigItem");

  private static final org.apache.thrift.protocol.TField TOTAL_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField REMAIN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("remainVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cycle", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTime", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReagentConfigItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReagentConfigItemTupleSchemeFactory();

  public double totalVolume; // required
  public double remainVolume; // required
  public java.lang.String name; // required
  public java.lang.String text; // required
  public double cycle; // required
  public long lastTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_VOLUME((short)1, "totalVolume"),
    REMAIN_VOLUME((short)2, "remainVolume"),
    NAME((short)3, "name"),
    TEXT((short)4, "text"),
    CYCLE((short)5, "cycle"),
    LAST_TIME((short)6, "lastTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_VOLUME
          return TOTAL_VOLUME;
        case 2: // REMAIN_VOLUME
          return REMAIN_VOLUME;
        case 3: // NAME
          return NAME;
        case 4: // TEXT
          return TEXT;
        case 5: // CYCLE
          return CYCLE;
        case 6: // LAST_TIME
          return LAST_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALVOLUME_ISSET_ID = 0;
  private static final int __REMAINVOLUME_ISSET_ID = 1;
  private static final int __CYCLE_ISSET_ID = 2;
  private static final int __LASTTIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("totalVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMAIN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("remainVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CYCLE, new org.apache.thrift.meta_data.FieldMetaData("cycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReagentConfigItem.class, metaDataMap);
  }

  public ReagentConfigItem() {
  }

  public ReagentConfigItem(
    double totalVolume,
    double remainVolume,
    java.lang.String name,
    java.lang.String text,
    double cycle,
    long lastTime)
  {
    this();
    this.totalVolume = totalVolume;
    setTotalVolumeIsSet(true);
    this.remainVolume = remainVolume;
    setRemainVolumeIsSet(true);
    this.name = name;
    this.text = text;
    this.cycle = cycle;
    setCycleIsSet(true);
    this.lastTime = lastTime;
    setLastTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReagentConfigItem(ReagentConfigItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalVolume = other.totalVolume;
    this.remainVolume = other.remainVolume;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    this.cycle = other.cycle;
    this.lastTime = other.lastTime;
  }

  public ReagentConfigItem deepCopy() {
    return new ReagentConfigItem(this);
  }

  @Override
  public void clear() {
    setTotalVolumeIsSet(false);
    this.totalVolume = 0.0;
    setRemainVolumeIsSet(false);
    this.remainVolume = 0.0;
    this.name = null;
    this.text = null;
    setCycleIsSet(false);
    this.cycle = 0.0;
    setLastTimeIsSet(false);
    this.lastTime = 0;
  }

  public double getTotalVolume() {
    return this.totalVolume;
  }

  public ReagentConfigItem setTotalVolume(double totalVolume) {
    this.totalVolume = totalVolume;
    setTotalVolumeIsSet(true);
    return this;
  }

  public void unsetTotalVolume() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALVOLUME_ISSET_ID);
  }

  /** Returns true if field totalVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalVolume() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALVOLUME_ISSET_ID);
  }

  public void setTotalVolumeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALVOLUME_ISSET_ID, value);
  }

  public double getRemainVolume() {
    return this.remainVolume;
  }

  public ReagentConfigItem setRemainVolume(double remainVolume) {
    this.remainVolume = remainVolume;
    setRemainVolumeIsSet(true);
    return this;
  }

  public void unsetRemainVolume() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REMAINVOLUME_ISSET_ID);
  }

  /** Returns true if field remainVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainVolume() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REMAINVOLUME_ISSET_ID);
  }

  public void setRemainVolumeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REMAINVOLUME_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public ReagentConfigItem setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getText() {
    return this.text;
  }

  public ReagentConfigItem setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public double getCycle() {
    return this.cycle;
  }

  public ReagentConfigItem setCycle(double cycle) {
    this.cycle = cycle;
    setCycleIsSet(true);
    return this;
  }

  public void unsetCycle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CYCLE_ISSET_ID);
  }

  /** Returns true if field cycle is set (has been assigned a value) and false otherwise */
  public boolean isSetCycle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CYCLE_ISSET_ID);
  }

  public void setCycleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CYCLE_ISSET_ID, value);
  }

  public long getLastTime() {
    return this.lastTime;
  }

  public ReagentConfigItem setLastTime(long lastTime) {
    this.lastTime = lastTime;
    setLastTimeIsSet(true);
    return this;
  }

  public void unsetLastTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTTIME_ISSET_ID);
  }

  /** Returns true if field lastTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTTIME_ISSET_ID);
  }

  public void setLastTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOTAL_VOLUME:
      if (value == null) {
        unsetTotalVolume();
      } else {
        setTotalVolume((java.lang.Double)value);
      }
      break;

    case REMAIN_VOLUME:
      if (value == null) {
        unsetRemainVolume();
      } else {
        setRemainVolume((java.lang.Double)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case CYCLE:
      if (value == null) {
        unsetCycle();
      } else {
        setCycle((java.lang.Double)value);
      }
      break;

    case LAST_TIME:
      if (value == null) {
        unsetLastTime();
      } else {
        setLastTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_VOLUME:
      return getTotalVolume();

    case REMAIN_VOLUME:
      return getRemainVolume();

    case NAME:
      return getName();

    case TEXT:
      return getText();

    case CYCLE:
      return getCycle();

    case LAST_TIME:
      return getLastTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_VOLUME:
      return isSetTotalVolume();
    case REMAIN_VOLUME:
      return isSetRemainVolume();
    case NAME:
      return isSetName();
    case TEXT:
      return isSetText();
    case CYCLE:
      return isSetCycle();
    case LAST_TIME:
      return isSetLastTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReagentConfigItem)
      return this.equals((ReagentConfigItem)that);
    return false;
  }

  public boolean equals(ReagentConfigItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_totalVolume = true;
    boolean that_present_totalVolume = true;
    if (this_present_totalVolume || that_present_totalVolume) {
      if (!(this_present_totalVolume && that_present_totalVolume))
        return false;
      if (this.totalVolume != that.totalVolume)
        return false;
    }

    boolean this_present_remainVolume = true;
    boolean that_present_remainVolume = true;
    if (this_present_remainVolume || that_present_remainVolume) {
      if (!(this_present_remainVolume && that_present_remainVolume))
        return false;
      if (this.remainVolume != that.remainVolume)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_cycle = true;
    boolean that_present_cycle = true;
    if (this_present_cycle || that_present_cycle) {
      if (!(this_present_cycle && that_present_cycle))
        return false;
      if (this.cycle != that.cycle)
        return false;
    }

    boolean this_present_lastTime = true;
    boolean that_present_lastTime = true;
    if (this_present_lastTime || that_present_lastTime) {
      if (!(this_present_lastTime && that_present_lastTime))
        return false;
      if (this.lastTime != that.lastTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalVolume);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(remainVolume);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cycle);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastTime);

    return hashCode;
  }

  @Override
  public int compareTo(ReagentConfigItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTotalVolume()).compareTo(other.isSetTotalVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalVolume, other.totalVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemainVolume()).compareTo(other.isSetRemainVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainVolume, other.remainVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCycle()).compareTo(other.isSetCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycle, other.cycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastTime()).compareTo(other.isSetLastTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTime, other.lastTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReagentConfigItem(");
    boolean first = true;

    sb.append("totalVolume:");
    sb.append(this.totalVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainVolume:");
    sb.append(this.remainVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycle:");
    sb.append(this.cycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastTime:");
    sb.append(this.lastTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReagentConfigItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReagentConfigItemStandardScheme getScheme() {
      return new ReagentConfigItemStandardScheme();
    }
  }

  private static class ReagentConfigItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReagentConfigItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReagentConfigItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalVolume = iprot.readDouble();
              struct.setTotalVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REMAIN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.remainVolume = iprot.readDouble();
              struct.setRemainVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cycle = iprot.readDouble();
              struct.setCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastTime = iprot.readI64();
              struct.setLastTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReagentConfigItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.totalVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.remainVolume);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CYCLE_FIELD_DESC);
      oprot.writeDouble(struct.cycle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReagentConfigItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReagentConfigItemTupleScheme getScheme() {
      return new ReagentConfigItemTupleScheme();
    }
  }

  private static class ReagentConfigItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReagentConfigItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReagentConfigItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTotalVolume()) {
        optionals.set(0);
      }
      if (struct.isSetRemainVolume()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetText()) {
        optionals.set(3);
      }
      if (struct.isSetCycle()) {
        optionals.set(4);
      }
      if (struct.isSetLastTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTotalVolume()) {
        oprot.writeDouble(struct.totalVolume);
      }
      if (struct.isSetRemainVolume()) {
        oprot.writeDouble(struct.remainVolume);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetCycle()) {
        oprot.writeDouble(struct.cycle);
      }
      if (struct.isSetLastTime()) {
        oprot.writeI64(struct.lastTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReagentConfigItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.totalVolume = iprot.readDouble();
        struct.setTotalVolumeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.remainVolume = iprot.readDouble();
        struct.setRemainVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cycle = iprot.readDouble();
        struct.setCycleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastTime = iprot.readI64();
        struct.setLastTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

