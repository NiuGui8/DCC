/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class ConfigItem implements org.apache.thrift.TBase<ConfigItem, ConfigItem._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigItem");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WRITE_PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("writePrivilege", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField READ_PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("readPrivilege", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigItemTupleSchemeFactory();

  public java.lang.String name; // required
  public java.lang.String text; // required
  /**
   * 
   * @see DataType
   */
  public DataType type; // required
  public java.lang.String unit; // required
  public java.util.List<RoleType> writePrivilege; // required
  public java.util.List<RoleType> readPrivilege; // required
  public java.util.List<java.lang.String> options; // required
  public java.lang.String value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TEXT((short)2, "text"),
    /**
     * 
     * @see DataType
     */
    TYPE((short)3, "type"),
    UNIT((short)4, "unit"),
    WRITE_PRIVILEGE((short)5, "writePrivilege"),
    READ_PRIVILEGE((short)6, "readPrivilege"),
    OPTIONS((short)7, "options"),
    VALUE((short)8, "value");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TEXT
          return TEXT;
        case 3: // TYPE
          return TYPE;
        case 4: // UNIT
          return UNIT;
        case 5: // WRITE_PRIVILEGE
          return WRITE_PRIVILEGE;
        case 6: // READ_PRIVILEGE
          return READ_PRIVILEGE;
        case 7: // OPTIONS
          return OPTIONS;
        case 8: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataType.class)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITE_PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("writePrivilege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RoleType.class))));
    tmpMap.put(_Fields.READ_PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("readPrivilege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RoleType.class))));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigItem.class, metaDataMap);
  }

  public ConfigItem() {
  }

  public ConfigItem(
    java.lang.String name,
    java.lang.String text,
    DataType type,
    java.lang.String unit,
    java.util.List<RoleType> writePrivilege,
    java.util.List<RoleType> readPrivilege,
    java.util.List<java.lang.String> options,
    java.lang.String value)
  {
    this();
    this.name = name;
    this.text = text;
    this.type = type;
    this.unit = unit;
    this.writePrivilege = writePrivilege;
    this.readPrivilege = readPrivilege;
    this.options = options;
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigItem(ConfigItem other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    if (other.isSetWritePrivilege()) {
      java.util.List<RoleType> __this__writePrivilege = new java.util.ArrayList<RoleType>(other.writePrivilege.size());
      for (RoleType other_element : other.writePrivilege) {
        __this__writePrivilege.add(other_element);
      }
      this.writePrivilege = __this__writePrivilege;
    }
    if (other.isSetReadPrivilege()) {
      java.util.List<RoleType> __this__readPrivilege = new java.util.ArrayList<RoleType>(other.readPrivilege.size());
      for (RoleType other_element : other.readPrivilege) {
        __this__readPrivilege.add(other_element);
      }
      this.readPrivilege = __this__readPrivilege;
    }
    if (other.isSetOptions()) {
      java.util.List<java.lang.String> __this__options = new java.util.ArrayList<java.lang.String>(other.options);
      this.options = __this__options;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
  }

  public ConfigItem deepCopy() {
    return new ConfigItem(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.text = null;
    this.type = null;
    this.unit = null;
    this.writePrivilege = null;
    this.readPrivilege = null;
    this.options = null;
    this.value = null;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public ConfigItem setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getText() {
    return this.text;
  }

  public ConfigItem setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  /**
   * 
   * @see DataType
   */
  public DataType getType() {
    return this.type;
  }

  /**
   * 
   * @see DataType
   */
  public ConfigItem setType(DataType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getUnit() {
    return this.unit;
  }

  public ConfigItem setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public int getWritePrivilegeSize() {
    return (this.writePrivilege == null) ? 0 : this.writePrivilege.size();
  }

  public java.util.Iterator<RoleType> getWritePrivilegeIterator() {
    return (this.writePrivilege == null) ? null : this.writePrivilege.iterator();
  }

  public void addToWritePrivilege(RoleType elem) {
    if (this.writePrivilege == null) {
      this.writePrivilege = new java.util.ArrayList<RoleType>();
    }
    this.writePrivilege.add(elem);
  }

  public java.util.List<RoleType> getWritePrivilege() {
    return this.writePrivilege;
  }

  public ConfigItem setWritePrivilege(java.util.List<RoleType> writePrivilege) {
    this.writePrivilege = writePrivilege;
    return this;
  }

  public void unsetWritePrivilege() {
    this.writePrivilege = null;
  }

  /** Returns true if field writePrivilege is set (has been assigned a value) and false otherwise */
  public boolean isSetWritePrivilege() {
    return this.writePrivilege != null;
  }

  public void setWritePrivilegeIsSet(boolean value) {
    if (!value) {
      this.writePrivilege = null;
    }
  }

  public int getReadPrivilegeSize() {
    return (this.readPrivilege == null) ? 0 : this.readPrivilege.size();
  }

  public java.util.Iterator<RoleType> getReadPrivilegeIterator() {
    return (this.readPrivilege == null) ? null : this.readPrivilege.iterator();
  }

  public void addToReadPrivilege(RoleType elem) {
    if (this.readPrivilege == null) {
      this.readPrivilege = new java.util.ArrayList<RoleType>();
    }
    this.readPrivilege.add(elem);
  }

  public java.util.List<RoleType> getReadPrivilege() {
    return this.readPrivilege;
  }

  public ConfigItem setReadPrivilege(java.util.List<RoleType> readPrivilege) {
    this.readPrivilege = readPrivilege;
    return this;
  }

  public void unsetReadPrivilege() {
    this.readPrivilege = null;
  }

  /** Returns true if field readPrivilege is set (has been assigned a value) and false otherwise */
  public boolean isSetReadPrivilege() {
    return this.readPrivilege != null;
  }

  public void setReadPrivilegeIsSet(boolean value) {
    if (!value) {
      this.readPrivilege = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public java.util.Iterator<java.lang.String> getOptionsIterator() {
    return (this.options == null) ? null : this.options.iterator();
  }

  public void addToOptions(java.lang.String elem) {
    if (this.options == null) {
      this.options = new java.util.ArrayList<java.lang.String>();
    }
    this.options.add(elem);
  }

  public java.util.List<java.lang.String> getOptions() {
    return this.options;
  }

  public ConfigItem setOptions(java.util.List<java.lang.String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public java.lang.String getValue() {
    return this.value;
  }

  public ConfigItem setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DataType)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((java.lang.String)value);
      }
      break;

    case WRITE_PRIVILEGE:
      if (value == null) {
        unsetWritePrivilege();
      } else {
        setWritePrivilege((java.util.List<RoleType>)value);
      }
      break;

    case READ_PRIVILEGE:
      if (value == null) {
        unsetReadPrivilege();
      } else {
        setReadPrivilege((java.util.List<RoleType>)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((java.util.List<java.lang.String>)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TEXT:
      return getText();

    case TYPE:
      return getType();

    case UNIT:
      return getUnit();

    case WRITE_PRIVILEGE:
      return getWritePrivilege();

    case READ_PRIVILEGE:
      return getReadPrivilege();

    case OPTIONS:
      return getOptions();

    case VALUE:
      return getValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TEXT:
      return isSetText();
    case TYPE:
      return isSetType();
    case UNIT:
      return isSetUnit();
    case WRITE_PRIVILEGE:
      return isSetWritePrivilege();
    case READ_PRIVILEGE:
      return isSetReadPrivilege();
    case OPTIONS:
      return isSetOptions();
    case VALUE:
      return isSetValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigItem)
      return this.equals((ConfigItem)that);
    return false;
  }

  public boolean equals(ConfigItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_writePrivilege = true && this.isSetWritePrivilege();
    boolean that_present_writePrivilege = true && that.isSetWritePrivilege();
    if (this_present_writePrivilege || that_present_writePrivilege) {
      if (!(this_present_writePrivilege && that_present_writePrivilege))
        return false;
      if (!this.writePrivilege.equals(that.writePrivilege))
        return false;
    }

    boolean this_present_readPrivilege = true && this.isSetReadPrivilege();
    boolean that_present_readPrivilege = true && that.isSetReadPrivilege();
    if (this_present_readPrivilege || that_present_readPrivilege) {
      if (!(this_present_readPrivilege && that_present_readPrivilege))
        return false;
      if (!this.readPrivilege.equals(that.readPrivilege))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetUnit()) ? 131071 : 524287);
    if (isSetUnit())
      hashCode = hashCode * 8191 + unit.hashCode();

    hashCode = hashCode * 8191 + ((isSetWritePrivilege()) ? 131071 : 524287);
    if (isSetWritePrivilege())
      hashCode = hashCode * 8191 + writePrivilege.hashCode();

    hashCode = hashCode * 8191 + ((isSetReadPrivilege()) ? 131071 : 524287);
    if (isSetReadPrivilege())
      hashCode = hashCode * 8191 + readPrivilege.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
    if (isSetOptions())
      hashCode = hashCode * 8191 + options.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWritePrivilege()).compareTo(other.isSetWritePrivilege());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWritePrivilege()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writePrivilege, other.writePrivilege);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadPrivilege()).compareTo(other.isSetReadPrivilege());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadPrivilege()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readPrivilege, other.readPrivilege);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ConfigItem(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writePrivilege:");
    if (this.writePrivilege == null) {
      sb.append("null");
    } else {
      sb.append(this.writePrivilege);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readPrivilege:");
    if (this.readPrivilege == null) {
      sb.append("null");
    } else {
      sb.append(this.readPrivilege);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigItemStandardScheme getScheme() {
      return new ConfigItemStandardScheme();
    }
  }

  private static class ConfigItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.szlabsun.wqimc.api.manager.DataType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WRITE_PRIVILEGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.writePrivilege = new java.util.ArrayList<RoleType>(_list64.size);
                RoleType _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = com.szlabsun.wqimc.api.manager.RoleType.findByValue(iprot.readI32());
                  struct.writePrivilege.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setWritePrivilegeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // READ_PRIVILEGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.readPrivilege = new java.util.ArrayList<RoleType>(_list67.size);
                RoleType _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = com.szlabsun.wqimc.api.manager.RoleType.findByValue(iprot.readI32());
                  struct.readPrivilege.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setReadPrivilegeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.options = new java.util.ArrayList<java.lang.String>(_list70.size);
                java.lang.String _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = iprot.readString();
                  struct.options.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(struct.unit);
        oprot.writeFieldEnd();
      }
      if (struct.writePrivilege != null) {
        oprot.writeFieldBegin(WRITE_PRIVILEGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.writePrivilege.size()));
          for (RoleType _iter73 : struct.writePrivilege)
          {
            oprot.writeI32(_iter73.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.readPrivilege != null) {
        oprot.writeFieldBegin(READ_PRIVILEGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.readPrivilege.size()));
          for (RoleType _iter74 : struct.readPrivilege)
          {
            oprot.writeI32(_iter74.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.options.size()));
          for (java.lang.String _iter75 : struct.options)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigItemTupleScheme getScheme() {
      return new ConfigItemTupleScheme();
    }
  }

  private static class ConfigItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetText()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetUnit()) {
        optionals.set(3);
      }
      if (struct.isSetWritePrivilege()) {
        optionals.set(4);
      }
      if (struct.isSetReadPrivilege()) {
        optionals.set(5);
      }
      if (struct.isSetOptions()) {
        optionals.set(6);
      }
      if (struct.isSetValue()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetUnit()) {
        oprot.writeString(struct.unit);
      }
      if (struct.isSetWritePrivilege()) {
        {
          oprot.writeI32(struct.writePrivilege.size());
          for (RoleType _iter76 : struct.writePrivilege)
          {
            oprot.writeI32(_iter76.getValue());
          }
        }
      }
      if (struct.isSetReadPrivilege()) {
        {
          oprot.writeI32(struct.readPrivilege.size());
          for (RoleType _iter77 : struct.readPrivilege)
          {
            oprot.writeI32(_iter77.getValue());
          }
        }
      }
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (java.lang.String _iter78 : struct.options)
          {
            oprot.writeString(_iter78);
          }
        }
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.szlabsun.wqimc.api.manager.DataType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unit = iprot.readString();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.writePrivilege = new java.util.ArrayList<RoleType>(_list79.size);
          RoleType _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = com.szlabsun.wqimc.api.manager.RoleType.findByValue(iprot.readI32());
            struct.writePrivilege.add(_elem80);
          }
        }
        struct.setWritePrivilegeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.readPrivilege = new java.util.ArrayList<RoleType>(_list82.size);
          RoleType _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = com.szlabsun.wqimc.api.manager.RoleType.findByValue(iprot.readI32());
            struct.readPrivilege.add(_elem83);
          }
        }
        struct.setReadPrivilegeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.options = new java.util.ArrayList<java.lang.String>(_list85.size);
          java.lang.String _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readString();
            struct.options.add(_elem86);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

