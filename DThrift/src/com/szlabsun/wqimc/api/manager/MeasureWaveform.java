/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.szlabsun.wqimc.api.manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class MeasureWaveform implements org.apache.thrift.TBase<MeasureWaveform, MeasureWaveform._Fields>, java.io.Serializable, Cloneable, Comparable<MeasureWaveform> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeasureWaveform");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SAMPLE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sampleRate", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SAMPLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sampleNum", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SAMPLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sampleType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("samples", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeasureWaveformStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeasureWaveformTupleSchemeFactory();

  public java.lang.String name; // required
  public double sampleRate; // required
  public short sampleNum; // required
  /**
   * 
   * @see DataType
   */
  public DataType sampleType; // required
  public java.nio.ByteBuffer samples; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SAMPLE_RATE((short)2, "sampleRate"),
    SAMPLE_NUM((short)3, "sampleNum"),
    /**
     * 
     * @see DataType
     */
    SAMPLE_TYPE((short)4, "sampleType"),
    SAMPLES((short)5, "samples");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SAMPLE_RATE
          return SAMPLE_RATE;
        case 3: // SAMPLE_NUM
          return SAMPLE_NUM;
        case 4: // SAMPLE_TYPE
          return SAMPLE_TYPE;
        case 5: // SAMPLES
          return SAMPLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SAMPLERATE_ISSET_ID = 0;
  private static final int __SAMPLENUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLE_RATE, new org.apache.thrift.meta_data.FieldMetaData("sampleRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAMPLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("sampleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SAMPLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sampleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataType.class)));
    tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("samples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeasureWaveform.class, metaDataMap);
  }

  public MeasureWaveform() {
  }

  public MeasureWaveform(
    java.lang.String name,
    double sampleRate,
    short sampleNum,
    DataType sampleType,
    java.nio.ByteBuffer samples)
  {
    this();
    this.name = name;
    this.sampleRate = sampleRate;
    setSampleRateIsSet(true);
    this.sampleNum = sampleNum;
    setSampleNumIsSet(true);
    this.sampleType = sampleType;
    this.samples = org.apache.thrift.TBaseHelper.copyBinary(samples);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeasureWaveform(MeasureWaveform other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.sampleRate = other.sampleRate;
    this.sampleNum = other.sampleNum;
    if (other.isSetSampleType()) {
      this.sampleType = other.sampleType;
    }
    if (other.isSetSamples()) {
      this.samples = org.apache.thrift.TBaseHelper.copyBinary(other.samples);
    }
  }

  public MeasureWaveform deepCopy() {
    return new MeasureWaveform(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setSampleRateIsSet(false);
    this.sampleRate = 0.0;
    setSampleNumIsSet(false);
    this.sampleNum = 0;
    this.sampleType = null;
    this.samples = null;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public MeasureWaveform setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public double getSampleRate() {
    return this.sampleRate;
  }

  public MeasureWaveform setSampleRate(double sampleRate) {
    this.sampleRate = sampleRate;
    setSampleRateIsSet(true);
    return this;
  }

  public void unsetSampleRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLERATE_ISSET_ID);
  }

  /** Returns true if field sampleRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSampleRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLERATE_ISSET_ID);
  }

  public void setSampleRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLERATE_ISSET_ID, value);
  }

  public short getSampleNum() {
    return this.sampleNum;
  }

  public MeasureWaveform setSampleNum(short sampleNum) {
    this.sampleNum = sampleNum;
    setSampleNumIsSet(true);
    return this;
  }

  public void unsetSampleNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLENUM_ISSET_ID);
  }

  /** Returns true if field sampleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSampleNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLENUM_ISSET_ID);
  }

  public void setSampleNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLENUM_ISSET_ID, value);
  }

  /**
   * 
   * @see DataType
   */
  public DataType getSampleType() {
    return this.sampleType;
  }

  /**
   * 
   * @see DataType
   */
  public MeasureWaveform setSampleType(DataType sampleType) {
    this.sampleType = sampleType;
    return this;
  }

  public void unsetSampleType() {
    this.sampleType = null;
  }

  /** Returns true if field sampleType is set (has been assigned a value) and false otherwise */
  public boolean isSetSampleType() {
    return this.sampleType != null;
  }

  public void setSampleTypeIsSet(boolean value) {
    if (!value) {
      this.sampleType = null;
    }
  }

  public byte[] getSamples() {
    setSamples(org.apache.thrift.TBaseHelper.rightSize(samples));
    return samples == null ? null : samples.array();
  }

  public java.nio.ByteBuffer bufferForSamples() {
    return org.apache.thrift.TBaseHelper.copyBinary(samples);
  }

  public MeasureWaveform setSamples(byte[] samples) {
    this.samples = samples == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(samples.clone());
    return this;
  }

  public MeasureWaveform setSamples(java.nio.ByteBuffer samples) {
    this.samples = org.apache.thrift.TBaseHelper.copyBinary(samples);
    return this;
  }

  public void unsetSamples() {
    this.samples = null;
  }

  /** Returns true if field samples is set (has been assigned a value) and false otherwise */
  public boolean isSetSamples() {
    return this.samples != null;
  }

  public void setSamplesIsSet(boolean value) {
    if (!value) {
      this.samples = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case SAMPLE_RATE:
      if (value == null) {
        unsetSampleRate();
      } else {
        setSampleRate((java.lang.Double)value);
      }
      break;

    case SAMPLE_NUM:
      if (value == null) {
        unsetSampleNum();
      } else {
        setSampleNum((java.lang.Short)value);
      }
      break;

    case SAMPLE_TYPE:
      if (value == null) {
        unsetSampleType();
      } else {
        setSampleType((DataType)value);
      }
      break;

    case SAMPLES:
      if (value == null) {
        unsetSamples();
      } else {
        if (value instanceof byte[]) {
          setSamples((byte[])value);
        } else {
          setSamples((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SAMPLE_RATE:
      return getSampleRate();

    case SAMPLE_NUM:
      return getSampleNum();

    case SAMPLE_TYPE:
      return getSampleType();

    case SAMPLES:
      return getSamples();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SAMPLE_RATE:
      return isSetSampleRate();
    case SAMPLE_NUM:
      return isSetSampleNum();
    case SAMPLE_TYPE:
      return isSetSampleType();
    case SAMPLES:
      return isSetSamples();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MeasureWaveform)
      return this.equals((MeasureWaveform)that);
    return false;
  }

  public boolean equals(MeasureWaveform that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sampleRate = true;
    boolean that_present_sampleRate = true;
    if (this_present_sampleRate || that_present_sampleRate) {
      if (!(this_present_sampleRate && that_present_sampleRate))
        return false;
      if (this.sampleRate != that.sampleRate)
        return false;
    }

    boolean this_present_sampleNum = true;
    boolean that_present_sampleNum = true;
    if (this_present_sampleNum || that_present_sampleNum) {
      if (!(this_present_sampleNum && that_present_sampleNum))
        return false;
      if (this.sampleNum != that.sampleNum)
        return false;
    }

    boolean this_present_sampleType = true && this.isSetSampleType();
    boolean that_present_sampleType = true && that.isSetSampleType();
    if (this_present_sampleType || that_present_sampleType) {
      if (!(this_present_sampleType && that_present_sampleType))
        return false;
      if (!this.sampleType.equals(that.sampleType))
        return false;
    }

    boolean this_present_samples = true && this.isSetSamples();
    boolean that_present_samples = true && that.isSetSamples();
    if (this_present_samples || that_present_samples) {
      if (!(this_present_samples && that_present_samples))
        return false;
      if (!this.samples.equals(that.samples))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sampleRate);

    hashCode = hashCode * 8191 + sampleNum;

    hashCode = hashCode * 8191 + ((isSetSampleType()) ? 131071 : 524287);
    if (isSetSampleType())
      hashCode = hashCode * 8191 + sampleType.getValue();

    hashCode = hashCode * 8191 + ((isSetSamples()) ? 131071 : 524287);
    if (isSetSamples())
      hashCode = hashCode * 8191 + samples.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MeasureWaveform other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSampleRate()).compareTo(other.isSetSampleRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampleRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampleRate, other.sampleRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSampleNum()).compareTo(other.isSetSampleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampleNum, other.sampleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSampleType()).compareTo(other.isSetSampleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampleType, other.sampleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samples, other.samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeasureWaveform(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sampleRate:");
    sb.append(this.sampleRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sampleNum:");
    sb.append(this.sampleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sampleType:");
    if (this.sampleType == null) {
      sb.append("null");
    } else {
      sb.append(this.sampleType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samples:");
    if (this.samples == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.samples, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeasureWaveformStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeasureWaveformStandardScheme getScheme() {
      return new MeasureWaveformStandardScheme();
    }
  }

  private static class MeasureWaveformStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeasureWaveform> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeasureWaveform struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAMPLE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sampleRate = iprot.readDouble();
              struct.setSampleRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SAMPLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sampleNum = iprot.readI16();
              struct.setSampleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SAMPLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sampleType = com.szlabsun.wqimc.api.manager.DataType.findByValue(iprot.readI32());
              struct.setSampleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.samples = iprot.readBinary();
              struct.setSamplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeasureWaveform struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAMPLE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.sampleRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAMPLE_NUM_FIELD_DESC);
      oprot.writeI16(struct.sampleNum);
      oprot.writeFieldEnd();
      if (struct.sampleType != null) {
        oprot.writeFieldBegin(SAMPLE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sampleType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.samples != null) {
        oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
        oprot.writeBinary(struct.samples);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeasureWaveformTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeasureWaveformTupleScheme getScheme() {
      return new MeasureWaveformTupleScheme();
    }
  }

  private static class MeasureWaveformTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeasureWaveform> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeasureWaveform struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSampleRate()) {
        optionals.set(1);
      }
      if (struct.isSetSampleNum()) {
        optionals.set(2);
      }
      if (struct.isSetSampleType()) {
        optionals.set(3);
      }
      if (struct.isSetSamples()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSampleRate()) {
        oprot.writeDouble(struct.sampleRate);
      }
      if (struct.isSetSampleNum()) {
        oprot.writeI16(struct.sampleNum);
      }
      if (struct.isSetSampleType()) {
        oprot.writeI32(struct.sampleType.getValue());
      }
      if (struct.isSetSamples()) {
        oprot.writeBinary(struct.samples);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeasureWaveform struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sampleRate = iprot.readDouble();
        struct.setSampleRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sampleNum = iprot.readI16();
        struct.setSampleNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sampleType = com.szlabsun.wqimc.api.manager.DataType.findByValue(iprot.readI32());
        struct.setSampleTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.samples = iprot.readBinary();
        struct.setSamplesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

